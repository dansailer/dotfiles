#            ██   ██                               ████ ██
#     █████ ░░   ░██                              ░██░ ░░   █████
#    ██░░░██ ██ ██████  █████   ██████  ███████  ██████ ██ ██░░░██
#   ░██  ░██░██░░░██░  ██░░░██ ██░░░░██░░██░░░██░░░██░ ░██░██  ░██
#   ░░██████░██  ░██  ░██  ░░ ░██   ░██ ░██  ░██  ░██  ░██░░██████
#    ░░░░░██░██  ░██  ░██   ██░██   ░██ ░██  ░██  ░██  ░██ ░░░░░██
#     █████ ░██  ░░██ ░░█████ ░░██████  ███  ░██  ░██  ░██  █████
#    ░░░░░  ░░    ░░   ░░░░░   ░░░░░░  ░░░   ░░   ░░   ░░  ░░░░░

[user]
	name = Daniel Sailer
	email = daniel@sailer.com.au
    github = dansailer

[credential]
    helper = osxkeychain

[core]
    editor = vim
	excludesfile = /Users/dansailer/.dotfiles/.global-ignore
    attributesfile = ~/.dotfiles/.gitattributes

    # Enable parallel I/O for operations like "git diff".
    preloadindex = true

    # Use 12 characters for the abbreviated commit hash. I can currently make
    # do with 10, but this should provide a certain level of safety for the
    # near-ish future. See the interesting and well-researched article at
    # http://blog.cuviper.com/2013/11/10/how-short-can-git-abbreviate/
    abbrev = 12

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true
    
[mergetool]
    keepBackup = true

[color]
    branch = auto
    diff = auto
    status = auto
    ui = auto

[color "branch"]
    current = red reverse
    local = blue
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 

[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[alias]
    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    cp = cherry-pick
    st = status -b
    cl = clone
    ci = commit
    co = checkout
    br = branch
    a = add
    s = status
    c = commit
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    filelog = log -u
    dlc = diff --cached HEAD^
    dl = "!git ll -1"
    la = "!git config -l | grep alias | cut -c 7-"
    d = !sh ~/dotfiles/bin/git-diff
    diff = diff --word-diff
    dc = diff --cached
    aa= !git add -u && git add . && git status
    cob = checkout -b
    up = !git fetch origin && git rebase origin/master
    ir = !git rebase -i origin/master
    done = !git fetch && git rebase origin/master && git checkout master && git merge @{-1}  && git push
    gg = log --oneline --abbrev-commit --all --graph --decorate --color
    unstage = reset HEAD --
    switch = !legit switch \"$@\"
    branches = !legit branches
    sprout = !legit sprout \"$@\"
    unpublish = !legit unpublish \"$@\"
    harvest = !legit harvest \"$@\"
    sync = !legit sync \"$@\"
    publish = !legit publish \"$@\"
    graft = !legit graft \"$@\"
    go = checkout -B
    ctags = !.git/hooks/ctags
    changelog = "!_() { t=$(git describe --abbrev=0 --tags); git log ${t}..HEAD --no-merges --pretty=format:'* %s'; }; _"
    # Show the diff between the latest commit and the current state
    # d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    # di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    # p = git pull --recurse-submodules

    # Clone a repository including all submodules
    # c = clone --recursive

    # Commit all changes
    # ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    # go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    # tags = tag -l
    # branches = branch -a
    # remotes = remote -v

    # List aliases
    # aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit
    # amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    # credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    # reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    # retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    # fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    # ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    # fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    # fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    
    # List contributors with number of commits
    # contributors = shortlog --summary --numbered

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    # mpr = "!f() { \
    #     declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    #     declare branch=\"${2:-$currentBranch}\"; \
    #     if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
    #         git fetch origin refs/pull/$1/head:pr/$1 && \
    #         git checkout -B $branch && \
    #         git rebase $branch pr/$1 && \
    #         git checkout -B $branch && \
    #         git merge pr/$1 && \
    #         git branch -D pr/$1 && \
    #         git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    #     fi \
    # }; f"

[credential]
    helper = osxkeychain

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[push]
    default = matching

[branch]
    autosetupmerge = true

[advice]
    statusHints = false

[diff]
    # Detect copies as well as renames
    renames = copies

[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[commit]
	template = /Users/dansailer/.stCommitMsg
